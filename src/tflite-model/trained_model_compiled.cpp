/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 31.05.2022 16:07:09

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7456;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.041210047900676727, } };
const TfArray<1, int> quant0_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 50, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ -53, 127, -109, 
  /* [0][1][][] */ 84, -44, 21, 
  /* [0][2][][] */ 47, -11, -19, 
  /* [1][0][][] */ -10, -60, 46, 
  /* [1][1][][] */ -127, 23, 47, 
  /* [1][2][][] */ -9, -107, 6, 
  /* [2][0][][] */ -35, 56, -24, 
  /* [2][1][][] */ 111, -127, 94, 
  /* [2][2][][] */ -56, 98, -76, 
  /* [3][0][][] */ 127, 52, -81, 
  /* [3][1][][] */ 77, 82, -53, 
  /* [3][2][][] */ 103, 23, -48, 
  /* [4][0][][] */ 127, 46, -79, 
  /* [4][1][][] */ -4, -2, 14, 
  /* [4][2][][] */ 118, 26, -96, 
  /* [5][0][][] */ 127, 103, 80, 
  /* [5][1][][] */ 120, 68, -11, 
  /* [5][2][][] */ 96, 89, 33, 
  /* [6][0][][] */ -100, 27, -89, 
  /* [6][1][][] */ -127, 82, -69, 
  /* [6][2][][] */ -52, 16, -55, 
  /* [7][0][][] */ 105, -76, 33, 
  /* [7][1][][] */ 54, 0, -9, 
  /* [7][2][][] */ -66, 127, -127, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0027053556405007839, 0.002658856799826026, 0.0024902359582483768, 0.0020101384725421667, 0.0027831862680613995, 0.0014768007677048445, 0.0026160217821598053, 0.0021726710256189108, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { -4065, -3139, -5149, -5829, -5656, -4275, -4802, -4223, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.00011148783232783899, 0.0001095716143026948, 0.00010262274008709937, 8.2837905210908502e-05, 0.00011469524179119617, 6.0859030782012269e-05, 0.00010780637967400253, 8.9535875304136425e-05, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ 34,-114,-31,22,2,23,-3,24, -65,31,-22,-100,-124,-122,-2,-81, 20,-76,-12,44,8,-7,-1,21, 
  /* [0][1][][] */ 10,-118,-42,-3,3,20,-3,20, -73,19,-19,-94,-104,-122,-21,-42, 5,-43,-6,-12,37,-3,-9,-6, 
  /* [0][2][][] */ -23,-99,-9,31,48,34,24,23, -55,1,-27,-127,-101,-82,-44,-92, 17,-76,-29,21,16,16,7,23, 
  /* [1][0][][] */ -127,24,-3,-88,-32,-97,-53,-52, 3,11,15,45,75,-26,-70,-75, -39,-8,97,-30,-36,-31,-11,24, 
  /* [1][1][][] */ 34,-91,-54,127,42,-42,-77,-36, -18,35,75,-49,-11,-115,-109,-41, -27,0,72,-74,-38,-16,60,75, 
  /* [1][2][][] */ 39,4,-61,67,-20,-50,-103,-84, 25,8,-11,64,123,-34,-68,12, 27,13,41,-17,-32,-32,30,48, 
  /* [2][0][][] */ 17,4,44,-41,-38,-23,-4,-13, 32,-5,69,22,-21,-47,-13,35, 45,-23,59,-37,-10,-16,-30,52, 
  /* [2][1][][] */ 59,-8,104,-23,6,-37,18,-12, 41,-1,44,-25,-20,-29,10,30, 50,-16,127,-3,7,8,-3,13, 
  /* [2][2][][] */ 12,-9,85,-2,6,-15,-6,70, 64,-12,94,2,-11,-59,-13,21, 20,-3,104,-32,-41,-35,5,66, 
  /* [3][0][][] */ 27,19,-59,47,58,63,-51,-1, -16,-121,-61,59,79,65,-16,29, 15,-35,-17,-28,-74,-10,64,-78, 
  /* [3][1][][] */ 26,-127,-84,81,75,-17,-102,-34, -20,-59,-10,25,-90,7,-14,-109, -62,-108,-28,-15,-63,-47,-29,21, 
  /* [3][2][][] */ -91,14,-36,34,-81,5,-97,-99, -72,-55,-54,1,-42,-20,-55,-25, -15,0,-35,-20,-11,10,-40,-27, 
  /* [4][0][][] */ 52,-102,6,-13,34,40,27,56, -126,11,-39,-106,-127,-72,-34,-72, 38,-105,-23,14,24,44,9,14, 
  /* [4][1][][] */ 17,-115,-37,33,2,12,-15,-24, -115,-14,-31,-112,-82,-77,-9,-115, 8,-93,-40,36,-12,-5,10,-16, 
  /* [4][2][][] */ 19,-91,-23,37,10,18,13,23, -77,38,-39,-87,-91,-25,-16,-40, 30,-55,-36,3,62,18,-19,-4, 
  /* [5][0][][] */ -59,-16,-73,-10,-30,55,-39,-49, -43,-77,-84,-27,-42,76,-67,-16, -7,-50,-71,6,60,35,-101,2, 
  /* [5][1][][] */ -47,-18,-72,-21,-33,-42,-9,-66, -54,-13,-12,-43,-26,-5,20,-35, -7,21,-23,8,10,24,-86,-8, 
  /* [5][2][][] */ -89,-41,-98,10,-41,-3,-31,-56, -15,-9,-97,-15,-64,34,127,-46, -13,4,-63,11,24,16,-25,-44, 
  /* [6][0][][] */ -8,-44,-19,-18,-21,-29,-2,1, -85,26,-49,-127,-76,-29,11,-27, -77,29,-85,-17,-10,-62,-65,-47, 
  /* [6][1][][] */ -55,3,-37,-49,-63,-102,-9,22, -4,0,-101,-12,-40,-89,99,-46, -93,14,-54,-34,-24,-41,-45,-72, 
  /* [6][2][][] */ 20,24,-52,-35,-2,-32,28,-43, -40,36,-45,-52,-61,-35,20,-64, -70,-10,-117,21,19,-6,-7,-47, 
  /* [7][0][][] */ -48,-32,15,-10,3,45,-60,-4, -16,-95,-53,9,34,57,-42,-37, -45,25,-95,-40,-15,-38,-19,-35, 
  /* [7][1][][] */ -14,5,-7,18,9,88,-48,-66, -19,-1,-77,35,20,18,-60,-29, -20,-58,-127,61,44,4,-19,-15, 
  /* [7][2][][] */ -35,-26,-6,-42,-66,-86,-26,-24, -19,-52,-55,-51,-62,-17,-95,9, -29,26,-36,8,-56,4,-77,-97, 
  /* [8][0][][] */ 23,11,16,-54,-22,37,-22,-21, -28,-127,-37,13,35,26,-20,-7, -41,-19,-7,-95,-112,-71,-6,-54, 
  /* [8][1][][] */ -93,11,-57,-67,-8,-59,-20,-24, 36,-101,-21,5,17,-4,-4,24, -124,10,-21,-86,-85,-95,-23,-43, 
  /* [8][2][][] */ -51,2,-2,-31,-11,-64,-18,-30, -17,-14,-14,-29,12,1,-9,-6, -66,25,6,-74,-51,-20,3,-39, 
  /* [9][0][][] */ -89,0,-18,-34,-25,67,-23,-3, -36,-10,-48,-113,-43,-11,70,-44, -56,-20,-55,6,13,4,-39,-46, 
  /* [9][1][][] */ -88,-25,-67,-39,-65,-8,-17,-97, -43,6,-39,-1,-44,120,90,35, -23,-55,-77,13,18,37,-91,12, 
  /* [9][2][][] */ -64,-34,-65,-52,-60,2,55,-83, -64,-28,-86,-20,-28,-24,80,10, -56,-32,-127,-9,2,40,-68,-44, 
  /* [10][0][][] */ -55,79,14,-110,-100,-83,-35,-44, 22,-104,-26,21,67,37,-12,8, -43,16,23,-124,-89,-84,-18,-32, 
  /* [10][1][][] */ -77,32,5,-72,-92,-49,-55,-18, -4,-127,-37,15,-18,19,-6,11, -40,26,13,-93,-80,-84,-16,-3, 
  /* [10][2][][] */ -44,32,-69,-54,-63,-43,-11,-85, 18,-110,-17,21,50,35,36,20, -41,17,16,-113,-74,-69,2,-56, 
  /* [11][0][][] */ -28,-23,-47,-49,-52,-63,46,-47, -92,37,-26,-32,-85,-78,0,-29, -6,35,-59,32,8,-44,24,-10, 
  /* [11][1][][] */ -58,7,-83,-89,-35,-12,8,-127, -14,-30,-22,-67,-11,-51,-9,-22, 6,-19,-58,-17,-19,-40,19,3, 
  /* [11][2][][] */ -98,-21,-58,-20,-33,-44,7,-51, -67,-22,-43,-17,-27,15,-35,-53, -5,-28,-72,45,48,1,-10,-16, 
  /* [12][0][][] */ 17,-5,-5,-57,-21,12,5,-53, -45,-112,-10,6,19,14,1,16, -95,31,-75,-21,-44,10,-7,57, 
  /* [12][1][][] */ -54,20,12,0,28,-5,-36,-31, 67,-61,87,-25,-26,-19,-119,40, -48,52,-99,-6,-36,-53,-30,-25, 
  /* [12][2][][] */ -22,-84,71,69,-25,-66,-50,109, -19,-49,-44,-70,-43,-86,-84,-127, 66,-23,-67,8,-37,60,-78,-52, 
  /* [13][0][][] */ 17,-6,23,-42,-39,-38,16,-24, 1,-29,57,-46,-29,-30,-43,-10, -16,-38,-18,-20,-35,-3,-47,-20, 
  /* [13][1][][] */ 72,-5,127,-16,-21,-28,112,66, -21,2,18,-47,-32,-8,-13,27, 9,-61,7,-17,-32,4,-15,37, 
  /* [13][2][][] */ 51,-2,71,-26,-55,-14,47,36, 16,19,15,-17,-18,0,61,28, 12,1,38,-14,24,-23,-54,17, 
  /* [14][0][][] */ 13,4,10,39,48,49,-7,-25, -30,-17,-20,-21,-55,-65,-30,-41, -80,1,-7,-41,-35,-65,12,-43, 
  /* [14][1][][] */ -52,-36,10,-29,-38,-67,-9,-26, -20,-52,33,-33,-59,-60,-41,7, 6,-44,-55,-6,-11,-30,6,7, 
  /* [14][2][][] */ -21,-6,28,33,-46,-13,-46,35, 12,127,-5,-19,-34,-37,31,-25, -43,-17,8,-17,2,-18,41,-78, 
  /* [15][0][][] */ -27,-37,-64,22,-38,-26,-127,-76, 2,3,-21,-2,43,21,-65,-14, 76,-12,33,8,9,-2,-18,-17, 
  /* [15][1][][] */ -53,-26,-87,-45,-58,-14,-90,-62, -12,13,-36,36,43,23,-59,-1, 28,-10,61,2,-23,6,59,74, 
  /* [15][2][][] */ -4,-44,-73,24,7,-22,-92,-69, 31,55,-8,16,28,-51,-61,-49, 44,-17,-22,-13,-26,-2,-24,50, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0052098589949309826, 0.0032250212971121073, 0.0043131699785590172, 0.0034445105120539665, 0.0049970187246799469, 0.0040748869068920612, 0.004690791480243206, 0.0040615973994135857, 0.0053173135966062546, 0.0036672898568212986, 0.0050627510063350201, 0.00507355947047472, 0.003253177972510457, 0.0040121264755725861, 0.0039418074302375317, 0.0045574409887194633, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { -2832, -5358, -9134, -3759, -3013, 2380, 4313, 644, 4234, 4198, -1978, 2220, -7773, -6072, -4326, -1183, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 5.4773601732449606e-05, 3.3906108001247048e-05, 4.5346303522819653e-05, 3.6213696148479357e-05, 5.2535917347995564e-05, 4.2841125832637772e-05, 4.9316411605104804e-05, 4.2701409256551415e-05, 5.5903321481309831e-05, 3.8555874198209494e-05, 5.3226987802190706e-05, 5.3340623708209023e-05, 3.4202130336780101e-05, 4.2181298340437934e-05, 4.1442002839175984e-05, 4.7914436436258256e-05, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[3*832] = { 
  3, -30, -5, -47, 36, -9, 17, 11, 56, 36, -20, 1, 57, 35, 38, -62, -9, 30, -86, -42, 8, 14, 9, 37, -9, 47, -32, 23, -24, -35, -14, 16, -23, 16, -37, -24, -28, 14, -18, 0, 38, -29, 40, 52, -53, -58, -26, 20, 40, 8, 24, -46, 23, -43, 54, -87, -76, -7, 25, -43, -5, 16, 43, -16, -39, -41, -23, -14, 14, 24, 86, 7, 17, 61, -1, 2, 8, 20, -10, -18, 7, 21, -67, 13, 24, 12, 81, 55, 35, 33, -40, 75, 34, -23, 9, -5, -54, -6, -3, 12, -16, 17, -46, 25, 1, 34, -10, 56, 27, -39, -40, 66, 6, -2, 13, 11, 47, 22, -24, 45, 38, 8, 7, 2, -4, 8, -44, 43, -58, -44, -26, -57, -41, 60, 37, 31, -21, 35, -54, 44, 31, -11, 6, -47, -16, 44, -68, 61, 0, 12, 31, -5, 35, -9, 12, 26, -31, -28, 21, 25, -18, 3, -3, 19, -12, 69, 25, -27, 42, 21, 16, 33, -47, -40, 16, 33, -17, -11, 7, 6, 19, 21, -39, -29, 91, 14, 41, -29, 14, 19, 9, 25, -1, -25, -5, -42, -36, 45, 80, 22, 13, 30, -21, 14, 3, 8, -32, -37, 20, 28, -73, 39, -13, 8, 45, 4, -16, 38, -2, 57, 23, -29, 17, -7, -27, -24, -15, -31, -48, 2, 12, -10, -25, 15, -52, 20, -13, -13, -74, 23, -7, 5, -15, -35, -12, 36, 31, -21, 56, 69, 30, -18, -5, 19, 13, 33, -23, -31, -12, 3, -27, 60, 53, 2, 5, 66, -47, 26, 12, -9, -24, -31, -15, 10, -29, 33, -24, 23, -13, 58, 25, 25, 1, 38, -25, -17, 5, 6, -16, -5, -32, -30, -22, 11, -25, 33, -33, -6, -10, -2, -25, -44, 0, 27, 24, 74, -16, -8, 20, -41, 25, -14, 21, 8, -35, 9, 6, -11, 3, 46, -39, -5, -22, 3, -32, 38, 85, -1, -40, 45, -46, -2, 5, 44, -8, -25, -72, -6, -58, 25, -9, 22, 17, 56, 50, 30, -4, 12, -4, -39, 11, 29, -4, 17, -12, -20, 6, 13, -3, -2, -8, 14, 17, 20, -56, 1, -20, 54, 40, -13, -29, 38, -2, 7, -30, -10, -36, -38, -25, 18, 46, -27, 29, -55, -36, -94, -10, 39, -11, 21, 69, 22, -32, 67, -64, 16, -22, 32, -33, -44, -29, 54, -30, 11, -5, 33, -1, 9, 18, -6, -29, 29, 15, -26, -7, 41, -23, 48, -19, -27, -38, -13, 34, -20, 17, -36, 13, 34, -12, -21, -8, 49, -17, -29, -5, -24, -29, 64, 37, -8, 19, -10, -16, 15, 24, 17, -1, -18, -54, -62, -3, -55, -14, 21, 48, -55, -1, 32, -84, -18, -4, 24, -13, -41, -7, -8, -66, 22, -28, 13, 33, 67, 46, 43, 9, 13, -2, -19, -27, 2, -21, 12, -18, -9, -29, 21, -1, 11, -14, 27, 22, 11, -41, -36, 59, 28, 39, 40, 16, 10, 76, 17, -38, -32, -15, -12, -20, -18, -5, -12, 34, -3, -30, -46, -8, -64, -17, 31, 24, 5, -3, 51, -9, 18, -7, -6, -3, -24, -4, 16, -60, 13, -2, -43, 40, -1, 5, -18, -39, 103, -25, -5, 6, -31, -1, -21, -4, -41, -23, 22, 7, -15, 52, 21, -5, 0, 20, -37, -19, 37, -35, -30, -31, -2, -8, 8, -25, -7, 14, 11, 28, -55, -38, 42, 7, 11, -50, -91, -48, -6, -24, 88, 33, 9, -19, 75, -43, 22, -75, -4, 4, -20, 6, 7, -49, 57, 30, -3, -7, 15, 47, 13, 13, 36, -35, -30, 4, -2, 18, -7, -4, -28, -5, -38, -6, -17, -42, -9, 23, -2, 33, -38, -5, -11, -28, 29, 35, 30, -32, -14, 1, 22, 78, -6, 19, -9, 24, -25, 0, 105, -45, -47, -25, -36, -17, 41, 68, 4, -44, 52, -60, -9, 33, -19, 32, -9, -28, 0, -40, 33, 10, 19, -6, 44, 34, 8, 20, 23, 35, -29, -4, 23, -22, 13, -25, 4, -20, -44, 15, -20, -50, -14, 34, 33, -7, 10, 13, 31, 37, 24, -23, -14, -20, 9, 44, -29, -23, 10, 0, 20, 2, -41, 10, -46, -26, -48, -3, -6, -34, 82, 65, 12, 9, 35, -59, 23, 49, 36, 43, -30, -12, 17, -81, 27, 14, 36, 74, 13, -2, 34, -48, 6, -10, -11, 33, 2, 29, 3, -43, 15, -16, 7, 20, -10, -3, -13, 10, 7, -2, -34, -15, 28, 18, 20, -22, -4, 55, 33, 46, -30, 18, 6, 1, 10, 47, -11, 0, -5, -13, -73, -60, -37, -24, -11, 37, 8, -5, 43, -21, 54, 30, 10, -7, -30, -11, 47, -89, 24, 32, 48, 21, 13, 8, 33, 22, 21, 20, -16, 5, 2, 19, 39, -67, 16, 7, -43, -45, 0, -25, 18, -4, 63, -30, -8, -13, 57, -17, -12, 5, -24, 4, -19, 43, -49, -37, -26, -34, -32, 17, -37, -32, -49, 
  35, -5, 6, 18, 29, -34, -13, 23, 27, -37, 30, -22, -54, -28, -7, 7, -1, -3, 27, 1, 6, -45, -95, -25, 9, -49, 64, 9, 50, -36, -16, -4, 23, 31, 37, 6, 40, -3, 8, 1, -69, 27, -4, -76, -16, -24, 5, 11, -59, -52, 9, 52, -38, -16, -48, 24, -76, -14, -34, -43, -18, 1, -68, -3, 80, 9, 6, -25, 29, -58, -58, -50, 38, -58, 44, 39, 41, -9, -49, 3, 11, -16, 10, -16, 46, -43, -15, -51, 0, -55, 32, -3, -13, 27, 7, -32, -15, 40, 15, -15, -10, -8, -28, 7, -8, 20, 5, -12, 27, 7, -25, 23, 15, 40, 9, -11, 48, -69, -27, -11, -37, -13, 5, -43, 11, 25, 32, -10, 56, -11, 9, 28, 39, -15, -96, -4, 29, -41, 71, -45, -5, -26, 3, 17, 12, -29, 13, -31, 54, -15, 2, 25, 76, 3, 54, -17, 12, -17, 2, 12, 11, -5, -4, 33, -14, -25, 7, 29, -25, -6, -37, -55, 82, 23, -1, -28, 32, -13, -4, -3, 37, -1, -47, 66, -45, -38, -63, -52, -40, -62, 38, 1, 50, -19, -23, 1, 78, 30, -9, 2, 22, -8, 52, -14, -4, -19, -14, 15, -2, -7, -4, -5, -5, -22, -38, 8, -24, -81, 19, -37, -20, -43, 5, 9, -2, 3, -10, 44, 0, -30, -46, -7, 49, 0, 3, 9, -51, -21, 25, -41, 48, 2, 48, -8, -15, -15, -11, -60, -11, -47, 26, -7, -17, -26, -6, -31, 62, -1, 18, -32, 85, 17, 21, -53, 60, -31, 99, 22, -58, 23, 27, 14, 70, -6, -29, -45, 78, -58, -15, -26, -17, -31, 50, -40, -24, 13, -27, -25, -28, 31, 35, 20, -28, 24, -20, -51, -21, -44, -9, -59, -16, -2, -4, -19, -35, -39, 21, -54, -18, 29, 28, -2, -12, -29, 5, -65, -17, 54, 92, -23, 76, 7, -31, -29, 59, -9, -51, -57, 54, -40, 73, -11, 15, -6, 21, -32, 85, -23, 11, 3, 100, -25, -65, 14, 2, -43, 66, -61, 36, -50, -1, -9, 27, 9, 14, -3, -33, -49, 25, -32, -39, 10, 2, 67, -30, -36, 25, -76, -28, 51, 13, -56, -32, -68, -7, -3, -25, -9, 8, 42, -59, 70, -54, 20, 127, 25, 2, 10, 92, -20, -49, -29, 83, -14, 110, -1, -11, 47, 31, 6, 83, -37, 2, 6, 18, -45, -42, -1, -31, -29, 66, -31, 21, -7, -5, -47, -2, 3, 17, -31, 30, 10, -46, -15, 8, -7, 18, -33, 13, 3, -10, -34, -1, -60, 36, 10, 14, -44, -81, 0, 42, -34, 18, -73, -10, 16, -35, 17, 105, 32, -68, -8, 118, -54, -12, -18, 78, -20, 99, 68, 1, -59, -33, -17, 68, -26, 18, -22, 27, 6, -33, -42, -8, -23, 26, -26, 8, 25, -5, -27, -53, -10, -9, 6, -12, -3, -34, 38, -22, 34, -68, -53, 30, -19, -22, 14, -27, 17, 24, 4, -33, -88, -82, -7, -34, -71, 17, -24, 40, 30, -68, -46, 81, -15, -12, -4, 82, -25, -42, -16, 62, -17, 81, -7, 5, -29, 7, -11, 43, -57, 4, -54, 59, 6, -40, -38, 16, 22, 21, -33, 51, -9, 2, 0, 48, -10, 11, 11, -7, 10, -23, -3, -24, 27, 9, -31, -3, 11, 15, -22, 41, -36, -28, 10, 54, 9, -24, 14, 5, 1, -10, -4, 12, -21, 9, -7, 45, 16, -25, 15, 72, -28, 6, -17, 54, -47, 71, 42, 21, -75, 3, 0, 9, -6, -12, -52, 53, 25, -50, -17, -23, -13, 15, -21, 9, -29, -21, 15, -31, -19, -33, 17, 24, 4, 39, 42, 14, 0, 20, 9, -6, -31, 29, -19, 5, 0, -10, -49, 17, -7, 15, -42, -74, 22, 0, 81, -36, -22, 17, -65, 88, -28, -2, -42, 60, 31, -49, -20, 42, -43, 67, 2, -14, 8, -13, -9, 63, -53, -34, -19, 24, -31, -8, -39, -34, -6, 9, -26, -8, -13, 11, -39, 14, -9, -14, -25, 2, 6, -19, 12, -13, 43, -36, -14, 21, -52, -5, -4, -50, -18, -35, 0, -17, -4, 3, 6, -15, -5, 20, 7, -34, -60, 38, 18, 65, -8, 20, 45, 44, -57, -59, -33, 55, -7, 85, -28, 2, -42, 1, -30, 47, 21, 20, -56, 31, -57, -34, -44, 15, -20, 7, -36, -32, -31, 0, -7, -41, -3, 18, -50, 1, -14, -43, -30, -24, 23, -30, -29, -22, -3, -37, -10, -23, -28, 54, -66, -85, -51, -27, -4, -25, 34, -14, -28, -50, 51, 34, 53, 41, -27, 11, -5, 35, -19, -56, -37, 55, -6, 72, -35, -42, -94, 31, -21, 20, -16, 2, -50, 2, -104, -26, -59, -67, -45, 9, -26, -2, -51, 4, -18, -1, -15, 45, -20, -28, 25, 29, -55, 7, -33, 26, -16, -24, 5, -4, -20, -16, -98, 4, -30, -92, -43, -27, -1, 38, -23, 40, 61, 29, 94, 9, -6, 
  -52, 17, 11, 42, -43, 32, -12, -19, -76, -20, -28, 7, -14, -12, -24, 54, -36, 12, 59, 30, -1, 15, 54, -16, -5, -1, -40, -24, -4, 66, 29, -10, 10, -10, 35, 4, 1, 10, -1, 4, -8, -5, -29, 18, 36, 48, -5, 2, -21, 4, -31, -3, -36, 39, -13, 51, 94, 30, -9, 36, 10, -35, 11, 17, -24, 66, 16, 33, -25, 32, -44, 24, -67, -19, -20, -52, -29, -35, 17, 46, -16, 4, 67, -21, -36, 6, -50, -9, -22, -5, 26, -52, -4, 9, 9, 20, 48, -12, 9, 3, 27, -2, 74, -10, 10, -43, -19, -38, -28, 57, 38, -50, -50, -19, -43, -9, -80, 35, 52, -16, -42, 22, -22, 23, -3, -20, 5, -47, -13, 36, 13, 25, -2, -47, 0, 0, 10, -5, 15, -15, -2, 13, -25, 50, -29, -22, 42, -30, -50, -9, -19, 4, -44, 21, -72, 11, 6, 40, -28, -5, -8, 24, 18, -63, -18, -39, -8, -2, -21, -11, 13, 30, 9, 25, 21, -13, -9, -13, -18, -8, -33, -10, 64, -29, -89, 17, -9, 40, 22, 6, -48, -29, -40, 44, 12, 17, -66, -62, -48, 3, -46, -18, -23, -11, -19, -10, 41, 38, -28, -29, 78, -14, -18, 4, 11, -13, 21, 11, 13, -62, -10, 42, -18, -8, 25, 4, 28, 8, 59, 19, 10, 52, -26, -38, 45, 13, 60, 11, 15, 8, -7, 0, -19, 36, 35, -15, -29, 36, -60, -27, -47, 2, 8, 8, -19, 5, -55, 53, 14, 31, -74, -28, -55, 52, -13, -34, -3, -9, 41, -3, 2, 26, -49, 6, 42, -4, -24, 1, 3, -31, -27, -10, -19, -30, 35, 16, 20, -1, 53, -32, 20, -11, 47, -37, 23, -12, 16, 14, 11, 60, 17, 26, 10, -15, -12, -39, 5, 71, 9, 30, -36, 25, -14, 39, 39, 6, -12, -40, -98, -29, -52, 45, 13, 9, -64, -37, -43, 13, 8, -28, -30, -27, -12, -43, -21, 27, -46, 13, 61, -14, -87, -6, 35, -53, -66, 15, -56, 27, -10, 33, -1, 3, -22, -20, 12, 27, 18, 32, -1, -17, 29, -36, 6, -41, 32, 1, -24, -9, -1, 0, 19, 8, 6, 30, 8, 4, 39, 29, 52, -62, 2, -7, 34, 45, -111, 76, 27, -1, -116, -19, -25, -22, -19, -50, -35, 10, 8, -50, 10, 47, -8, -26, 57, 6, -20, -3, 61, -12, -12, 22, -50, -23, -38, 43, 13, -20, 1, -15, 24, 26, -25, -12, -8, 8, -5, 14, -47, -37, 4, 49, 2, -17, 27, 56, -34, 43, 9, -22, 9, -14, -58, 20, -1, 50, -9, -31, 25, 9, -47, 39, 26, 30, -108, 16, -42, 48, -41, -17, -25, -51, 5, 14, -4, 42, -33, 29, 49, -20, -22, -21, -12, -15, -44, -17, -35, -7, -1, 24, 12, 22, 49, 9, 21, -21, 22, -15, 36, -26, 20, -48, 10, 18, 37, 30, -7, -42, -45, -44, -37, 3, -77, 57, 76, 20, 23, 75, 26, 29, -37, -4, 3, 32, -85, 50, 41, 54, -9, -9, -8, -4, -37, 17, -58, -10, -4, 24, -12, 34, -29, -2, 44, -14, -45, 49, 0, 34, -21, -6, -27, -75, -13, 18, -13, 40, -8, 12, 14, 14, 23, -74, 37, -1, -38, -20, -25, 17, -37, 29, 10, -14, -36, 44, 23, 11, -42, -35, 43, -11, -31, 0, -3, 40, -12, -17, -31, 15, -17, 53, 69, 16, -50, -56, -44, -6, -32, -60, -14, -67, 21, 27, 12, 33, -48, 5, 43, -20, -33, -11, 19, 13, -32, 5, -1, -4, 9, 19, 4, 20, 6, 10, 23, 19, 5, -2, -39, -10, -7, 6, -10, 10, -39, 23, 9, -2, 15, -9, -22, 31, 22, 27, -3, -2, -20, -16, -1, -73, 0, 40, -16, -72, -39, 35, 40, 40, -39, -68, -11, 16, -1, -49, -14, -4, -21, 6, 3, 13, -16, -2, 63, -13, -10, 6, 17, -22, 11, 11, 18, -5, -14, 51, -22, -15, 14, 0, 32, -4, 17, 15, 4, -26, 34, -17, -14, -16, -3, 33, 16, 14, -24, 10, 37, 1, 14, -35, -47, 16, 26, -38, 21, -3, -19, 45, -23, 29, -18, 54, 16, -30, -4, -30, -25, -16, -18, 3, -1, -10, -44, -4, -3, 15, -28, -27, 53, -3, -25, 1, -27, -3, -10, 11, 4, 0, 22, 38, 9, 18, 5, 4, 18, 32, 33, -4, 24, 3, -5, 8, 9, 19, 19, 30, 4, -51, 20, -20, -29, 76, 17, 1, -41, 10, 9, -55, 20, -3, -13, -21, -7, -16, -59, 64, 15, 38, -4, 41, -32, 22, -68, -24, -42, -5, -17, 46, 4, 24, -15, -25, 50, -2, -61, 22, 30, -10, 1, 27, -25, 20, -11, 25, 4, 19, -29, -33, 9, 4, -3, 51, -2, 30, 11, 4, 7, -62, 27, 16, -20, -40, 23, 59, 25, 20, 50, 45, 0, 34, -10, 75, 24, -33, -33, -59, 38, 59, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 3,832 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0045342016965150833, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[3] = { 3882, -7234, 1230, };
const TfArray<1, int> tensor_dimension8 = { 1, { 3 } };
const TfArray<1, float> quant8_scale = { 1, { 6.8463567004073411e-05, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,50,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.041210047900676727, } };
const TfArray<1, int> quant9_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,50,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.010513451881706715, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.010513451881706715, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.015099365264177322, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.015099365264177322, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.015099365264177322, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.097621046006679535, } };
const TfArray<1, int> quant15_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,7,8 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension9, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
